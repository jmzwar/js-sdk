"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const secp256k1_1 = require("secp256k1");
const address_1 = require("../address");
const buffer_1 = require("../buffer");
const crypto_1 = require("../crypto");
function hashPersonalMessage(message) {
    return crypto_1.sha3(buffer_1.anyToBuffer("\x19Ethereum Signed Message:\n32"), crypto_1.sha3(message));
}
exports.hashPersonalMessage = hashPersonalMessage;
function signPersonalMessage(message, privateKey) {
    const hash = hashPersonalMessage(message);
    const { recovery, signature } = secp256k1_1.sign(hash, privateKey);
    return Buffer.concat([
        signature,
        buffer_1.anyToBuffer(recovery + 27),
    ]);
}
exports.signPersonalMessage = signPersonalMessage;
function recoverPublicKeyFromPersonalMessage(message, signature) {
    const hash = hashPersonalMessage(message);
    const signatureBuff = buffer_1.anyToBuffer(signature);
    const s = signatureBuff.slice(0, -1);
    const r = signatureBuff[signatureBuff.length - 1] - 27;
    let result = null;
    try {
        const publicKey = secp256k1_1.recover(hash, s, r, false);
        result = secp256k1_1.publicKeyVerify(publicKey) ? publicKey : null;
    }
    catch (err) {
        result = null;
    }
    return result;
}
exports.recoverPublicKeyFromPersonalMessage = recoverPublicKeyFromPersonalMessage;
function recoverAddressFromPersonalMessage(message, signature) {
    const publicKey = recoverPublicKeyFromPersonalMessage(message, signature);
    return publicKey ? address_1.publicKeyToAddress(publicKey) : null;
}
exports.recoverAddressFromPersonalMessage = recoverAddressFromPersonalMessage;
