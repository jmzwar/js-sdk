"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const buffer_1 = require("../buffer");
const crypto_1 = require("../crypto");
function getAbiMethodSignature(name, ...args) {
    return crypto_1.sha3(`${name}(${args.join(",")})`).slice(0, 4);
}
exports.getAbiMethodSignature = getAbiMethodSignature;
function abiEncodePacked(...types) {
    return (...args) => {
        if (types.length !== args.length) {
            return null;
        }
        const buffers = [];
        for (const index in types) {
            if (typeof args[index] !== "undefined") {
                const type = types[index];
                const arg = args[index];
                switch (type) {
                    case "bool":
                        buffers.push(buffer_1.anyToBuffer(!!arg));
                        break;
                    case "address":
                        buffers.push(buffer_1.anyToBuffer(arg, {
                            size: 20,
                        }));
                        break;
                    case "bytes":
                    case "string":
                        buffers.push(buffer_1.anyToBuffer(arg));
                        break;
                    default:
                        const matched = type.match(/\d+/g);
                        let size = Array.isArray(matched) && matched.length
                            ? parseInt(matched[0], 10)
                            : 0;
                        if (size &&
                            size % 8 === 0) {
                            size = parseInt(matched[0], 10) / 8;
                            buffers.push(buffer_1.anyToBuffer(arg, {
                                size,
                            }));
                        }
                        else {
                            return null;
                        }
                }
            }
            else {
                return null;
            }
        }
        return Buffer.concat(buffers);
    };
}
exports.abiEncodePacked = abiEncodePacked;
