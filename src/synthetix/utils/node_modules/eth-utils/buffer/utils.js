"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BN = require("bn.js");
const hex_1 = require("../hex");
function anyToBuffer(data = Buffer.alloc(0), options = {}) {
    options = Object.assign({ size: 0, autoStringDetect: false, defaults: Buffer.alloc(0) }, options);
    let result = options.defaults;
    switch (typeof data) {
        case "number": {
            let hex = data.toString(16);
            if (hex.length % 2) {
                hex = `0${hex}`;
            }
            result = Buffer.from(hex, "hex");
            break;
        }
        case "string":
            const hex = (data.startsWith("0x") || options.autoStringDetect)
                ? hex_1.prepareHex(data, { evenLength: true })
                : null;
            if (hex) {
                result = Buffer.from(hex, "hex");
            }
            else {
                result = Buffer.from(data, "utf8");
            }
            break;
        case "boolean":
            result = Buffer.alloc(1, data ? 1 : 0);
            break;
        case "object":
            if (Buffer.isBuffer(data)) {
                result = data;
            }
            else if (BN.isBN(data)) {
                const hex = hex_1.prepareHex(data.toString(16), { evenLength: true });
                result = Buffer.from(hex, "hex");
            }
            else if (data instanceof Uint8Array) {
                result = Buffer.from([
                    ...data,
                ]);
            }
            break;
    }
    if (Buffer.isBuffer(result) &&
        options.size > result.length) {
        result = Buffer.concat([
            Buffer.alloc(options.size - result.length, 0),
            result,
        ]);
    }
    return result;
}
exports.anyToBuffer = anyToBuffer;
